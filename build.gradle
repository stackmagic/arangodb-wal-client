
// repositories and dependencies for buildscript itself
buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath 'net.swisstech:swissarmyknife:+'
	}
}

plugins {
	id 'java'
	id 'eclipse'
	id 'project-report'
	id 'net.swisstech.eclipseenhancer' version '1.0.0'
}

description = 'Client for the ArangoDB Write-Ahead-Log (WAL) over HTTP'
group       = 'net.swisstech'
version     = '1.0.0'

// re-use repositories from buildscript
buildscript.repositories.each { repositories.add(it) }

// java version
sourceCompatibility = 1.7
targetCompatibility = 1.7

// task to generate wrapper
task wrapper(type: Wrapper) {
	gradleVersion = '2.2.1'
}

// extra configuration for integration tests
configurations {
	intTestCompile
}

sourceSets {
	intTest {
		compileClasspath = sourceSets.main.output + configurations.testRuntime
		runtimeClasspath = sourceSets.main.output + configurations.testRuntime + output
	}
}

// project dependencies
ext.versions = [
	  jackson        : '2.5.0'
	, okhttp         : '2.2.0'
	, commons_io     : '2.4'
	, swissarmyknife : '1.1.8'
	, logback_classic: '1.1.2'
	, testng         : '6.8.17'
	, mockito        : '1.10.19'
]

dependencies {
	compile        "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
	compile        "com.squareup.okhttp:okhttp:${versions.okhttp}"
	compile        "commons-io:commons-io:${versions.commons_io}"
	compile        "net.swisstech:swissarmyknife:${versions.swissarmyknife}"

	testCompile    "ch.qos.logback:logback-classic:${versions.logback_classic}"
	testCompile    "org.testng:testng:${versions.testng}"
	testCompile    "org.mockito:mockito-all:${versions.mockito}"

	intTestCompile "ch.qos.logback:logback-classic:${versions.logback_classic}"
	intTestCompile "org.testng:testng:${versions.testng}"
	intTestCompile "org.mockito:mockito-all:${versions.mockito}"
}

// normal unit tests
test {
	useTestNG()
}

// setup for integration tests, requires a local installation of arangodb
ext.arangoDbPort = new Integer(18529)
ext.arangoDataDir = "/tmp/arangodb_wal_client_tests_${System.currentTimeMillis()}"

task('intTest', type: Test, dependsOn: 'intTestClasses') {
	useTestNG()
	testLogging.showStandardStreams = true
	group          = 'verification'
	testSrcDirs    = sourceSets.intTest.java.srcDirs as List
	testClassesDir = sourceSets.intTest.output.classesDir
	classpath      = sourceSets.intTest.runtimeClasspath
	systemProperty 'ARANGODB_PORT', project.arangoDbPort
}

afterEvaluate {

	task('startArangoDb') << {
		new File(project.arangoDataDir + "/data").mkdirs()
		project.ext.arangodb_process = net.swisstech.swissarmyknife.sys.linux.BackgroundProcess
			.launch([
				'/usr/sbin/arangod',
				'--server.endpoint'   , "tcp://127.0.0.1:${project.arangoDbPort}",
				'--database.directory', "${project.arangoDataDir}/data",
				'--log.file'          , '+'
			], null)
			.waitForOpenPorts([ project.arangoDbPort ], 10000)
	}

	task('stopArangoDb') << {
		project.arangodb_process.shutdown()
		project.delete(project.arangoDataDir)
	}

	tasks.intTest.dependsOn('startArangoDb')
	tasks.intTest.finalizedBy('stopArangoDb')
}
