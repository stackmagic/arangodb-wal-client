import net.swisstech.swissarmyknife.sys.linux.BackgroundProcess

// repositories and dependencies for buildscript itself
buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath 'net.swisstech:swissarmyknife:+'
	}
}

plugins {
	id 'java'
	id 'jacoco'
	id 'maven-publish'
	id 'project-report'
	id 'com.jfrog.bintray' version '1.8.4'
}

description = 'Client for the ArangoDB Write-Ahead-Log (WAL) over HTTP'
group       = 'net.swisstech'
version     = '2.0.0'

// re-use repositories from buildscript
buildscript.repositories.each { repositories.add(it) }

// java version
sourceCompatibility = 1.8
targetCompatibility = 1.8

// task to generate wrapper
wrapper {
	gradleVersion = '4.10'
}

// source-code jar
task sourceJar(type: Jar) {
	from sourceSets.main.allSource
}

// bintray uses the publication, also includes source jar
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourceJar {
				classifier 'sources'
			}
		}
	}
}

bintray {
	// key and user must be in your ~/.gradle/gradle.properties
	user         = project.hasProperty('swisstech_bintray_user')   ? project.swisstech_bintray_user   : System.getenv('SWISSTECH_BINTRAY_USER')
	key          = project.hasProperty('swisstech_bintray_apikey') ? project.swisstech_bintray_apikey : System.getenv('SWISSTECH_BINTRAY_KEY')
	dryRun       = false
	publish      = true
	publications = [ 'mavenJava' ]
	pkg {
		repo            = 'maven'
		name            = project.name
		desc            = project.description
		licenses        = [ 'Apache-2.0' ]
		websiteUrl      = "https://github.com/stackmagic/${project.name}"
		vcsUrl          = "https://github.com/stackmagic/${project.name}.git"
		issueTrackerUrl = "https://github.com/stackmagic/${project.name}/issues"
		publicDownloadNumbers = true
		version {
			name = project.version
			desc = project.description
		}
	}
}

// extra configuration for integration tests
configurations {
	intTestCompile
}

sourceSets {
	intTest {
		compileClasspath = sourceSets.main.output + configurations.testRuntime
		runtimeClasspath = sourceSets.main.output + configurations.testRuntime + output
	}
}

// project dependencies
ext.versions = [
	  jackson        : '2.5.0'
	, okhttp         : '2.2.0'
	, commons_io     : '2.4'
	, swissarmyknife : '1.2.0'
    , slf4j          : '1.8.0-beta2'
	, testng         : '6.8.17'
	, mockito        : '1.10.19'
]

dependencies {
	compile        "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
	compile        "com.squareup.okhttp:okhttp:${versions.okhttp}"
	compile        "commons-io:commons-io:${versions.commons_io}"
	compile        "net.swisstech:swissarmyknife:${versions.swissarmyknife}"

	testCompile    "org.slf4j:slf4j-simple:${versions.slf4j}"
	testCompile    "org.testng:testng:${versions.testng}"
	testCompile    "org.mockito:mockito-all:${versions.mockito}"

	intTestCompile "org.slf4j:slf4j-simple:${versions.slf4j}"
	intTestCompile "org.testng:testng:${versions.testng}"
	intTestCompile "org.mockito:mockito-all:${versions.mockito}"
}

// normal unit tests
test {
	useTestNG()

	jacoco {
		destinationFile = file("${buildDir}/jacoco.ut.exec")
	}
}

// setup for integration tests, requires a local installation of arangodb
ext.arangoDbPort = 18529
ext.arangoDbLaunchCommand = [
	'/usr/bin/docker', 'run',
	'--env', 'ARANGO_NO_AUTH=1',
	'--publish', "${project.arangoDbPort}:8529",
	'--rm',
	'arangodb'
]

task('intTest', type: Test, dependsOn: 'intTestClasses') {
	useTestNG()
	testLogging.showStandardStreams = true
	group           = 'verification'
	testClassesDirs = sourceSets.intTest.output.classesDirs
	classpath       = sourceSets.intTest.runtimeClasspath
	systemProperty 'ARANGODB_PORT', project.arangoDbPort

	jacoco {
		destinationFile = file("${buildDir}/jacoco.it.exec")
	}
}

jacocoTestReport {
	reports.html.destination = file("${reportsDir}/jacoco/${name}")
}
task('jacocoIntTestReport', type: JacocoReport) {
	reports.html.destination = file("${reportsDir}/jacoco/${name}")
	executionData intTest
	sourceSets sourceSets.main
}

// start & stop arangodb
afterEvaluate {
	task('dockerCommand').doLast {
		println project.arangoDbLaunchCommand.join(' ')
	}

	task('startArangoDb').doLast {
		project.ext.arangodb_process =
				BackgroundProcess
						.launch(project.arangoDbLaunchCommand, null)
						.waitForStringInStdout('ready for business', 15 * 1000)
	}

	task('stopArangoDb').doLast {
		project.arangodb_process.shutdown()
	}

    tasks.intTest.dependsOn('startArangoDb')
    tasks.intTest.finalizedBy('stopArangoDb')
}
